classdef McsCmosNetworkExplorerSource < handle
% Holds the contents of a NetworkExplorer data source
%
% Important fields:
%   STAData         -   (cell array) Holds the STAs for each channel/unit
%                       in the group. The STAs are read from the file the
%                       first time this array is accessed.
%   STAInfos        -   (cell array) Holds the metadata for each STA
%   Spikes          -   (cell array) Holds the Spikes detected in the STA
%                       of each channel/unit in the group. The Spikes are
%                       read from the file the first time this array is
%                       accessed.
%   SpikeInfos      -   (cell array) Holds the metadata for each Spikes
%                       structure
%   STAStdDev       -   (cell array) Holds the standard deviation used for
%                       spike detection for each channel in the STA. The
%                       standard deviations are loaded from the file the
%                       first time this array is accessed.
%   Settings        -   (struct) Holds the settings of the STAExplorer
%
% (c) 2019 by Multi Channel Systems MCS GmbH
    properties (SetAccess = private)
        STAData = {};   % (cell array) STAs for each channel/unit
        STAInfos = {}; % (struct) metadata for each STA
        Spikes = {}; % (cell array) Spikes for each channel/unit
        SpikeInfos = {}; % (struct) metadata for each Spike data
        STAStdDev = {}; % (cell array) Standard devs for each channel in the STA
        STAStdDevInfos = {}; % (struct) metadata for each STAStdDev data
        DataDimensions = 'columns x rows x samples'; % The dimension of the STA matrix
        Label           % (string) The name of the STAExplorer
        DataSubType
        DataUnit % (string) The data unit for the STA data
        DataType = 'double' % (string) The data type for the STA data
        Info % (struct) Contains metadata for the STAExplorer
        Settings = []; % (struct) Contains settings datasets, each as a field
    end
    
    properties (Access = private)
        STADataLoaded = false;
        SpikeDataLoaded = false;
        StdDevDataLoaded = false;
        Internal = false;
        StructInfo
        FileName
    end
    
    methods
        function str = McsCmosNetworkExplorerSource(filename, strStruct, varargin)
        % Constructs a McsCmosNetworkExplorerSource object
        %
        % function str = McsCmosNetworkExplorerSource(filename, strStruct, varargin)
        %
        % Input:
        %   filename        -   (string) The HDF5 file name
        %   strStruct       -   (struct) The HDF5 tree structure of the
        %                       NetworkExplorer group generated by the
        %                       h5info command
        
            if exist('h5info')
                mode = 'h5';
            else
                mode = 'hdf5';
            end
            
            str.Label = McsHDF5.McsH5Helper.GetFromAttributes(strStruct, 'ID.Instance', mode);
            str.DataSubType = McsHDF5.McsH5Helper.GetFromAttributes(strStruct, 'SubType', mode);
            str.Info = McsHDF5.McsH5Helper.ReadInfoFromAttributes(strStruct, mode);
            
            str.Settings = McsHDF5.McsCmosNetworkExplorerSource.ReadSettingsDatasets(filename, strStruct, mode);
            str.STAInfos = McsHDF5.McsCmosNetworkExplorerSource.ReadStaInfos(strStruct, mode);
            str.SpikeInfos = McsHDF5.McsCmosNetworkExplorerSource.ReadStaSpikeInfos(strStruct, mode);
            str.STAStdDevInfos = McsHDF5.McsCmosNetworkExplorerSource.ReadStaStdDevInfos(strStruct, mode);
            if isempty(str.DataUnit) % only for the file version without units at the STA datasets
                str.DataUnit = repmat({'nV'}, size(str.STAInfos, 1), size(str.STAInfos, 2));
            end
            str.StructInfo = strStruct;
            str.FileName = filename;
        end
        
        function data = get.STAData(str)
        % Accessor function for the STAData field.
        %
        % function data = get.STAData(str)
        %
        % Will read the STA data from file the first time this field is
        % accessed.
            if exist('h5info')
                mode = 'h5';
            else
                mode = 'hdf5';
            end
            
            if ~str.Internal && ~str.STADataLoaded
                str.Internal = true;
                McsHDF5.print('Reading STA data...')
                try 
                    for stai = 1:length(str.STAInfos)
                        if strcmp(mode, 'h5')
                            sta = h5read(str.FileName, [str.StructInfo.Name '/' str.STAInfos{stai}.IDInstance]);
                        else
                            sta = hdf5read(str.FileName, [str.StructInfo.Name '/' str.STAInfos{stai}.IDInstance]);
                        end
                        str.STAData = [str.STAData {sta}];
                    end
                end
                McsHDF5.print('done!\n');
                str.STADataLoaded = true;
                str.Internal = false;
            end
            data = str.STAData;
        end
        
        function data = get.Spikes(str)
        % Accessor function for the Spikes field.
        %
        % function data = get.SpikeData(str)
        %
        % Will read the Spikes data from file the first time this field is
        % accessed.
            if exist('h5info')
                mode = 'h5';
            else
                mode = 'hdf5';
            end
            
            if str.Info.Version < 2
                % doesn't exist for version 1
                data = {};
                str.SpikeDataLoaded = true;
                return;
            end
            
            if ~str.Internal && ~str.SpikeDataLoaded
                str.Internal = true;
                McsHDF5.print('Reading STA spike data...')
                try 
                    for stai = 1:length(str.SpikeInfos)
                        if strcmp(mode, 'h5')
                            spikeData = h5read(str.FileName, [str.StructInfo.Name '/' str.SpikeInfos{stai}.IDInstance]);
                        else
                            spikeData = hdf5read(str.FileName, [str.StructInfo.Name '/' str.SpikeInfos{stai}.IDInstance]);
                        end
                        fn = fieldnames(spikeData);
                        numCutout = sum(cellfun(@(x)(~isempty(regexp(x, 'x\d+', 'once'))), fn));
                        cutouts = zeros(numCutout, length(spikeData.SensorID));
                        for ni = 1:numCutout
                            cutouts(ni,:) = spikeData.(['x' num2str(ni)]);
                        end
                        sd = [];
                        sd.TimeStamp = spikeData.TimeStamp;
                        sd.SensorID = spikeData.SensorID;
                        sd.Cutout = cutouts';
                        str.Spikes = [str.Spikes {sd}];
                    end
                end
                McsHDF5.print('done!\n');
                str.SpikeDataLoaded = true;
                str.Internal = false;
            end
            data = str.Spikes;
        end
        
        function data = get.STAStdDev(str)
        % Accessor function for the STAStdDev field.
        %
        % function data = get.STAStdDev(str)
        %
        % Will read the STAStdDev data from file the first time this field
        % is accessed.
            if exist('h5info')
                mode = 'h5';
            else
                mode = 'hdf5';
            end
            
            if str.Info.Version < 2
                % doesn't exist for version 1
                data = {};
                str.StdDevDataLoaded = true;
                return;
            end
            
            if ~str.Internal && ~str.StdDevDataLoaded
                str.Internal = true;
                McsHDF5.print('Reading STA std dev data...')
                try 
                    for stai = 1:length(str.STAStdDevInfos)
                        if strcmp(mode, 'h5')
                            stdDevData = h5read(str.FileName, [str.StructInfo.Name '/' str.STAStdDevInfos{stai}.IDInstance]);
                        else
                            stdDevData = hdf5read(str.FileName, [str.StructInfo.Name '/' str.STAStdDevInfos{stai}.IDInstance]);
                        end
                        sd = [];
                        sd.SensorID = stdDevData.SensorID;
                        sd.StdDev = stdDevData.SdtDev;
                        str.STAStdDev = [str.STAStdDev {sd}];
                    end
                end
                McsHDF5.print('done!\n');
                str.StdDevDataLoaded = true;
                str.Internal = false;
            end
            data = str.STAStdDev;
        end
        
        function s = disp(str)
            s = 'McsCmosNetworkExplorerSource object\n\n';
            s = [s 'Properties:\n'];
            s = [s '\tLabel:\t\t\t\t\t ' strtrim(str.Label) '\n'];
            s = [s '\tData Type:\t\t ' str.DataSubType '\n'];
            s = [s '\tSTAs Loaded:\t\t\t '];
            if str.STADataLoaded
                s = [s 'true\n'];
            else
                s = [s 'false\n'];
            end
            s = [s '\tSpikes Loaded:\t\t\t '];
            if str.SpikeDataLoaded
                s = [s 'true\n'];
            else
                s = [s 'false\n'];
            end
            s = [s '\n'];
            
            s = [s 'Available Fields:\n'];
            s = [s '\tSTAData:\t\t\t\t '];
            if str.STADataLoaded
                s = [s '{' num2str(size(str.STAData, 1)) 'x' num2str(size(str.STAData, 2)) ' cell}'];
            else
                s = [s 'not loaded'];
            end
            s = [s '\n'];
            s = [s '\tSpikes:\t\t\t\t\t '];
            if str.SpikeDataLoaded
                s = [s '{' num2str(size(str.Spikes, 1)) 'x' num2str(size(str.Spikes, 2)) ' cell}'];
            else
                s = [s 'not loaded'];
            end
            s = [s '\n'];
            s = [s '\tSTAStdDev:\t\t\t\t '];
            if str.StdDevDataLoaded
                s = [s '{' num2str(size(str.STAStdDev, 1)) 'x' num2str(size(str.STAStdDev, 2)) ' cell}'];
            else
                s = [s 'not loaded'];
            end
            s = [s '\n'];
            s = [s '\tSTAInfos:\t\t\t\t {' num2str(size(str.STAInfos, 1)) 'x' num2str(size(str.STAInfos, 2)) ' cell}'];
            s = [s '\n'];
            s = [s '\tSpikeInfos:\t\t\t\t {' num2str(size(str.SpikeInfos, 1)) 'x' num2str(size(str.SpikeInfos, 2)) ' cell}'];
            s = [s '\n'];
            s = [s '\tDataDimensions:\t\t\t ' str.DataDimensions];
            s = [s '\n'];
            s = [s '\tDataUnit:\t\t\t\t {' num2str(size(str.DataUnit, 1)) 'x' num2str(size(str.DataUnit, 2)) ' cell}'];
            s = [s '\n'];
            s = [s '\tDataType:\t\t\t\t ' str.DataType];
            s = [s '\n'];
            s = [s '\tLabel:\t\t\t\t\t ' str.Label];
            s = [s '\n'];
            s = [s '\tDataSubType:\t\t\t ' str.DataSubType];
            s = [s '\n'];
            s = [s '\tInfo:\t\t\t\t\t [1x1 struct]'];
            s = [s '\n'];
            if ~isempty(str.Settings)
                s = [s '\tSettings:\t\t\t\t [1x1 struct]'];
                s = [s '\n'];
            end
            s = [s '\n'];
            fprintf(s);
        end
        
        function out_str = readPartialSTAData(str,cfg)
        % Read a subset of STAs from the data source
        %
        % function out_str = readPartialSTAData(str,cfg)
        %
        % Reads a subset of the STAs from the HDF5 file and returns the
        % McsCmosNetworkExplorerSource object containing only the specific
        % STAs. Useful, if the data has not yet been read from the file
        % and the user is only interested in specific STAs.
        %
        % Input:
        %   str         -   The McsCmosNetworkExplorerSource object
        %
        %   cfg         -   Either empty (for default parameters) or a
        %                   structure with (some of) the following fields:
        %                   'sta': (1 x n) Array of indexes into the
        %                   STAInfos array. If empty, all STAs are loaded
        %
        % Output:
        %   out_str     -   The McsCmosNetworkExplorerSource object
        %                   containing the requested STAs
            if exist('h5info')
                mode = 'h5';
            else
                mode = 'hdf5';
            end
            
            defaultStas = 1:length(str.STAInfos);
            [cfg, isDefault] = McsHDF5.checkParameter(cfg, 'sta', defaultStas);
            
            % read metadata
            tmpStruct = str.StructInfo;
            tmpcfg = [];
            tmpcfg.dataType = str.DataType;
            out_str = McsHDF5.McsCmosNetworkExplorerSource(str.FileName, tmpStruct, tmpcfg);
            
            out_str.Internal = true;
            out_str.STAInfos = str.STAInfos(cfg.sta);
            
            if str.STADataLoaded
                out_str.STAData = str.STAData(cfg.sta);
            else
                % read data segment
                McsHDF5.print('Reading partial STA data...');
                out_str.STAData = cell(1, length(out_str.STAInfos));
                for stai = 1:length(out_str.STAInfos)
                    if strcmp(mode, 'h5')
                        out_str.STAData{stai} = h5read(out_str.FileName, [out_str.StructInfo.Name '/' out_str.STAInfos{stai}.IDInstance]);
                    else
                        out_str.STAData{stai} = hdf5read(out_str.FileName, [out_str.StructInfo.Name '/' out_str.STAInfos{stai}.IDInstance]);
                    end
                    out_str.STAData{stai} = permute(out_str.STAData{stai},[2 1 3]);
                end
                McsHDF5.print('done!\n');
            end
            
            if str.Info.Version > 1
                out_str.SpikeInfos = str.SpikeInfos(cfg.sta);
                out_str.STAStdDev = str.STAStdDev(cfg.sta);
                if str.SpikeDataLoaded
                    out_str.Spikes = str.Spikes(cfg.sta);
                else
                    % read data segment
                    McsHDF5.print('Reading partial STA spike data...');
                    out_str.Spikes = cell(1, length(out_str.SpikeInfos));
                    for stai = 1:length(out_str.SpikeInfos)
                        if strcmp(mode, 'h5')
                            out_str.Spikes{stai} = h5read(out_str.FileName, [out_str.StructInfo.Name '/' out_str.SpikeInfos{stai}.IDInstance]);
                        else
                            out_str.Spikes{stai} = hdf5read(out_str.FileName, [out_str.StructInfo.Name '/' out_str.SpikeInfos{stai}.IDInstance]);
                        end
                    end
                    McsHDF5.print('done!\n');
                end
                if str.StdDevDataLoaded
                    out_str.STAStdDev = str.STAStdDev(cfg.sta);
                else
                    % read data segment
                    McsHDF5.print('Reading partial STA std dev data...');
                    out_str.STAStdDev = cell(1, length(out_str.STAStdDevInfos));
                    for stai = 1:length(out_str.STAStdDevInfos)
                        if strcmp(mode, 'h5')
                            out_str.STAStdDev{stai} = h5read(out_str.FileName, [out_str.StructInfo.Name '/' out_str.STAStdDevInfos{stai}.IDInstance]);
                        else
                            out_str.STAStdDev{stai} = hdf5read(out_str.FileName, [out_str.StructInfo.Name '/' out_str.STAStdDevInfos{stai}.IDInstance]);
                        end
                    end
                    McsHDF5.print('done!\n');
                end
            end
            
            out_str.STADataLoaded = true;
            out_str.SpikeDataLoaded = true;
            out_str.StdDevDataLoaded = true;
            out_str.DataType = str.DataType;
            out_str.Internal = false;
            out_str.DataUnit = str.DataUnit(cfg.sta);
        end
        
    end
    
    methods (Static)
        mouseSingleSensor(src, evt)
        
        mouseHandlerHeatMap(src, evt)
        
        fig = plotSingleSensor(parentFIG,UOI,coordinates)
        
        plotHeatMap(fig, coordinates, heat, sensorDimension, SourceIDs)
    end
    
    methods (Static, Access=private)
        function set = ReadSettingsDatasets(filename, strStruct, mode)
            settingsTypes = {'a95db4a1-d124-4c52-8889-2264fcdb489b',...
                '935a1aa6-4082-482e-9d4d-1ad60d1b1680',...
                '44b29fba-ec5c-48b5-8e0e-02ad9b9ac83a',...
                'b3e6c253-2228-4a47-ba4e-7055210ba862',...
                'de316ac6-ad66-4d78-acc4-e3f29bd40991'};
            
            set = McsHDF5.McsH5Helper.ReadDatasetsToStruct(filename, strStruct, mode, settingsTypes);
        end
        
        function staInfos = ReadStaInfos(strStruct, mode)
            staType = '442b7514-fe3a-4c66-8ae9-4f249ef48f2f';
            staInfos = {};
            for di = 1:length(strStruct.Datasets)
                type = McsHDF5.McsH5Helper.GetFromAttributes(strStruct.Datasets(di), 'ID.TypeID', mode);
                info = [];
                if strcmpi(type, staType)
                    for ai = 1:length(strStruct.Datasets(di).Attributes)
                        [name, value] = McsHDF5.McsH5Helper.AttributeNameValueForStruct(strStruct.Datasets(di).Attributes(ai), mode);
                        info.(name) = value;
                    end
                    staInfos = [staInfos {info}];
                end
            end
        end
        
        function staSpikes = ReadStaSpikeInfos(strStruct, mode)
            spikeType = '1b4e0b8b-6af1-4b55-a685-a6d28a922eb3';
            staSpikes = {};
            for di = 1:length(strStruct.Datasets)
                type = McsHDF5.McsH5Helper.GetFromAttributes(strStruct.Datasets(di), 'ID.TypeID', mode);
                info = [];
                if strcmpi(type, spikeType)
                    for ai = 1:length(strStruct.Datasets(di).Attributes)
                        [name, value] = McsHDF5.McsH5Helper.AttributeNameValueForStruct(strStruct.Datasets(di).Attributes(ai), mode);
                        info.(name) = value;
                    end
                    staSpikes = [staSpikes {info}];
                end
            end
        end
        
        function staStdDevs = ReadStaStdDevInfos(strStruct, mode)
            spikeType = 'a056832a-013d-4215-b8a6-cb1debeb1c56';
            staStdDevs = {};
            for di = 1:length(strStruct.Datasets)
                type = McsHDF5.McsH5Helper.GetFromAttributes(strStruct.Datasets(di), 'ID.TypeID', mode);
                info = [];
                if strcmpi(type, spikeType)
                    for ai = 1:length(strStruct.Datasets(di).Attributes)
                        [name, value] = McsHDF5.McsH5Helper.AttributeNameValueForStruct(strStruct.Datasets(di).Attributes(ai), mode);
                        info.(name) = value;
                    end
                    staStdDevs = [staStdDevs {info}];
                end
            end
        end
    end
end